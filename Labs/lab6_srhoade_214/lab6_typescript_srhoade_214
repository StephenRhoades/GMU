Script started on 2023-10-11 18:42:37-04:00
bash-4.4$ unm[Kame -a
Linux zeus-2.cec.gmu.edu 4.18.0-348.23.1.el8_5.x86_64 #1 SMP Tue Apr 12 11:20:32 EDT 2022 x86_64 x86_64 x86_64 GNU/Linux
bash-4.4$ pwd
/home/srhoade/CS262/lab6_srhoade_214
bash-4.4$ ls
lab6_srhoade_214.c  lab6_typescript_srhoade_214  Makefile
bash-4.4$ cat lab6_srhoade_214.c 
/* Stephen Rhoades G01369048
 * CS 262, Lab section 214
 * lab6: Random Numbers and Dynamic Memory 
 */

#include <stdio.h>
#include <stdlib.h>

void shuffleArray(int *numArray, int arrayLength){
	int i, j, temp;
	for (i = arrayLength-1; i > 0; i-- ){
		j = rand() % (i + 1);
		temp = numArray[i];
		numArray[i] = numArray[j];
		numArray[j] = temp;
	}
}

int compare(const void *a, const void *b){
	return (*(int*)a - *(int*)b);
}

void getMemory(int **numArray, int n){
	if (n > 500 || n < 2) {
		printf("Error! array size out of bounds [2-500]\n");	
		exit(-1);
	}
	*numArray = malloc(sizeof(int) * n);
	if (*numArray == NULL) {
		printf("Error allocating memory!\n");
		exit(-1);
	}
}

void initArray(int *numArray, int arrayLength){
	int i;
	for (i = 0; i < arrayLength; i++){
		*(numArray+i) = i;
	}
}

void printArray(int *numArray, int arrayLength){
	int i;
	for (i = 0; i < arrayLength; i++){
	        printf("%d ", *(numArray + i));
	}
        printf("\n");
}

int main(int argc, char *argv[] ) {
	int s, n, i;
	int *numArray = 0;
	
	if (argc <= 2) {
		printf("Not enough arguments for main to run. Please try again with at least two arguments.\n");
		return 0;
	}
	
	sscanf(argv[1], "%d", &s);
	sscanf(argv[2], "%d", &n);
	srand((unsigned)s);

	getMemory(&numArray, n);
	
	
	printf("This program will initilize an array %d digits long from 0 to %d.\n", n, n-1);
	printf("The array will be printed, randomly shuffled then printed, and sorted then printed one final time in that order.\n");
	printf("This entire process will repeat 10 times with a new line separating each iteration.\n");
	
	for (i = 0; i < 10; i++){

		initArray(numArray, n);
		printArray(numArray, n);
	
		shuffleArray(numArray, n);
		printArray(numArray, n);
	
		qsort(numArray, n, sizeof(int), compare);
		printArray(numArray, n);
		printf("\n");
	}
		
	free(numArray);
	return 1;
}
bash-4.4$ cat Makefile 
 # Stephen Rhoades G01369048
 # CS 262, Lab section lab214
 # lab 6
    
  CC = gcc
  CFLAGS = -g -Wall -std=c89 -pedantic-errors
  TARGET = lab6_srhoade_214
  LIBS = -lm

$(TARGET): $(TARGET).c
	$(CC) $(TARGET).c -o $(TARGET) $(CFLAGS) $(LIBS)

clean:
	rm $(TARGET)

bash-4.4$ make
gcc lab6_srhoade_214.c -o lab6_srhoade_214 -g -Wall -std=c89 -pedantic-errors -lm
bash-4.4$ ls
lab6_srhoade_214  lab6_srhoade_214.c  lab6_typescript_srhoade_214  Makefile
bash-4.4$ ./lab6_srhoade_214 500 10
This program will initilize an array 10 digits long from 0 to 9.
The array will be printed, randomly shuffled then printed, and sorted then printed one final time in that order.
This entire process will repeat 10 times with a new line separating each iteration.
0 1 2 3 4 5 6 7 8 9 
6 7 9 4 5 3 2 1 0 8 
0 1 2 3 4 5 6 7 8 9 

0 1 2 3 4 5 6 7 8 9 
5 8 3 2 1 4 6 9 7 0 
0 1 2 3 4 5 6 7 8 9 

0 1 2 3 4 5 6 7 8 9 
3 9 8 4 5 0 2 1 6 7 
0 1 2 3 4 5 6 7 8 9 

0 1 2 3 4 5 6 7 8 9 
4 6 1 7 5 2 3 0 8 9 
0 1 2 3 4 5 6 7 8 9 

0 1 2 3 4 5 6 7 8 9 
8 6 2 4 0 5 7 3 9 1 
0 1 2 3 4 5 6 7 8 9 

0 1 2 3 4 5 6 7 8 9 
8 6 4 3 5 1 7 0 9 2 
0 1 2 3 4 5 6 7 8 9 

0 1 2 3 4 5 6 7 8 9 
0 5 3 2 1 7 8 6 4 9 
0 1 2 3 4 5 6 7 8 9 

0 1 2 3 4 5 6 7 8 9 
0 4 2 5 1 6 3 7 9 8 
0 1 2 3 4 5 6 7 8 9 

0 1 2 3 4 5 6 7 8 9 
6 7 9 5 2 1 4 8 3 0 
0 1 2 3 4 5 6 7 8 9 

0 1 2 3 4 5 6 7 8 9 
4 3 6 1 0 7 5 8 2 9 
0 1 2 3 4 5 6 7 8 9 

bash-4.4$ make clean
rm lab6_srhoade_214
bash-4.4$ ls
lab6_srhoade_214.c  lab6_typescript_srhoade_214  Makefile
bash-4.4$ exit
exit

Script done on 2023-10-11 18:44:23-04:00
